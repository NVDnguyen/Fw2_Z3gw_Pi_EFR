// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

// The following is brought in by the endianness component, which all
// applications must include
#include "sl_endianness.h"

#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG 1

// Default values for the attributes longer than a pointer, in a form of a
// binary blob. All attribute values with size greater than 2 bytes. Excluding 0
// values and externally saved values. Separate block is generated for
// big-endian and little-endian cases.

#define GENERATED_DEFAULTS_COUNT (5)

#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
   0x09, 0xAC, 0x2F, /* 0,DEFAULT value for cluster: Green Power, attribute: gpp functionality, side: client */ \
   0xFF, 0xFF, 0xFF, /* 3,DEFAULT value for cluster: Green Power, attribute: gpp active functionality, side: client */ \
   0x5A, 0x69, 0x67, 0x42, 0x65, 0x65, 0x41, 0x6C, 0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30, 0x39, /* 6,DEFAULT value for cluster: Green Power, attribute: gp link key, side: client */ \
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* 22,DEFAULT value for cluster: Over the Air Bootloading, attribute: OTA Upgrade Server ID, side: client */ \
   0xFF, 0xFF, 0xFF, 0xFF, /* 30,DEFAULT value for cluster: Over the Air Bootloading, attribute: Offset (address) into the file, side: client */ \
}
#else //!BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
  0x2F, 0xAC, 0x09,  /* 0,DEFAULT value for cluster: Green Power, attribute: gpp functionality, side: client */ \
  0xFF, 0xFF, 0xFF,  /* 3,DEFAULT value for cluster: Green Power, attribute: gpp active functionality, side: client */ \
   0x5A, 0x69, 0x67, 0x42, 0x65, 0x65, 0x41, 0x6C, 0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30, 0x39, /* 6,DEFAULT value for cluster: Green Power, attribute: gp link key, side: client */ \
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* 22,DEFAULT value for cluster: Over the Air Bootloading, attribute: OTA Upgrade Server ID, side: client */ \
  0xFF, 0xFF, 0xFF, 0xFF,  /* 30,DEFAULT value for cluster: Over the Air Bootloading, attribute: Offset (address) into the file, side: client */ \
}
#endif


// This is an array of EmberAfAttributeMinMaxValue structures.

#define GENERATED_MIN_MAX_DEFAULT_COUNT (0)
	#define GENERATED_MIN_MAX_DEFAULTS { }


#define GENERATED_ATTRIBUTE_COUNT (92)

// This is an array of EmberAfAttributeMetadata structures.
#define GENERATED_ATTRIBUTES { \
  { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x08  } }, /* 0 Cluster: Basic, Attribute: ZCL version, Side: server*/ \
		  { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00  } }, /* 1 Cluster: Basic, Attribute: application version, Side: server*/ \
		  { 0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00  } }, /* 2 Cluster: Basic, Attribute: stack version, Side: server*/ \
		  { 0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00  } }, /* 3 Cluster: Basic, Attribute: hardware version, Side: server*/ \
		  { 0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 4 Cluster: Basic, Attribute: manufacturer name, Side: server*/ \
	  { 0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 5 Cluster: Basic, Attribute: model identifier, Side: server*/ \
	  { 0x0006, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 6 Cluster: Basic, Attribute: date code, Side: server*/ \
	  { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00  } }, /* 7 Cluster: Basic, Attribute: power source, Side: server*/ \
		  { 0x0008, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0xFF  } }, /* 8 Cluster: Basic, Attribute: generic device class, Side: server*/ \
		  { 0x0009, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0xFF  } }, /* 9 Cluster: Basic, Attribute: generic device type, Side: server*/ \
		  { 0x000A, ZCL_OCTET_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 10 Cluster: Basic, Attribute: product code, Side: server*/ \
	  { 0x000B, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 65, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 11 Cluster: Basic, Attribute: product url, Side: server*/ \
	  { 0x4000, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 12 Cluster: Basic, Attribute: sw build id, Side: server*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001  } }, /* 13 Cluster: Basic, Attribute: cluster revision, Side: server*/ \
		  { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0000  } }, /* 14 Cluster: Identify, Attribute: identify time, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001  } }, /* 15 Cluster: Identify, Attribute: cluster revision, Side: server*/ \
		  { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 16 Cluster: Groups, Attribute: name support, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001  } }, /* 17 Cluster: Groups, Attribute: cluster revision, Side: server*/ \
		  { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 18 Cluster: Scenes, Attribute: scene count, Side: server*/ \
		  { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 19 Cluster: Scenes, Attribute: current scene, Side: server*/ \
		  { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000  } }, /* 20 Cluster: Scenes, Attribute: current group, Side: server*/ \
		  { 0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 21 Cluster: Scenes, Attribute: scene valid, Side: server*/ \
		  { 0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 22 Cluster: Scenes, Attribute: name support, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001  } }, /* 23 Cluster: Scenes, Attribute: cluster revision, Side: server*/ \
		  { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0x00  } }, /* 24 Cluster: On/off, Attribute: on/off, Side: server*/ \
		  { 0x4000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x01  } }, /* 25 Cluster: On/off, Attribute: global scene control, Side: server*/ \
		  { 0x4001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0000  } }, /* 26 Cluster: On/off, Attribute: on time, Side: server*/ \
		  { 0x4002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0000  } }, /* 27 Cluster: On/off, Attribute: off wait time, Side: server*/ \
		  { 0x4003, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE| ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0xFF  } }, /* 28 Cluster: On/off, Attribute: start up on off, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001  } }, /* 29 Cluster: On/off, Attribute: cluster revision, Side: server*/ \
		  { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0x00  } }, /* 30 Cluster: Level Control, Attribute: current level, Side: server*/ \
		  { 0x0001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000  } }, /* 31 Cluster: Level Control, Attribute: remaining time, Side: server*/ \
		  { 0x000F, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00  } }, /* 32 Cluster: Level Control, Attribute: options, Side: server*/ \
		  { 0x0010, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0000  } }, /* 33 Cluster: Level Control, Attribute: on off transition time, Side: server*/ \
		  { 0x0011, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0xFE  } }, /* 34 Cluster: Level Control, Attribute: on level, Side: server*/ \
		  { 0x0014, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00  } }, /* 35 Cluster: Level Control, Attribute: default move rate, Side: server*/ \
		  { 0x4000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE| ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0x33  } }, /* 36 Cluster: Level Control, Attribute: start up current level, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001  } }, /* 37 Cluster: Level Control, Attribute: cluster revision, Side: server*/ \
		  { 0x0000, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[22]) } }, /* 38 Cluster: Over the Air Bootloading, Attribute: OTA Upgrade Server ID, Side: client*/ \
	  { 0x0001, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[30]) } }, /* 39 Cluster: Over the Air Bootloading, Attribute: Offset (address) into the file, Side: client*/ \
	  { 0x0006, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x00  } }, /* 40 Cluster: Over the Air Bootloading, Attribute: OTA Upgrade Status, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001  } }, /* 41 Cluster: Over the Air Bootloading, Attribute: cluster revision, Side: client*/ \
		  { 0x0010, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x14  } }, /* 42 Cluster: Green Power, Attribute: gpp max proxy table entries, Side: client*/ \
		  { 0x0011, ZCL_LONG_OCTET_STRING_ATTRIBUTE_TYPE, 255, (ATTRIBUTE_MASK_CLIENT), { NULL } }, /* 43 Cluster: Green Power, Attribute: proxy table, Side: client*/ \
	  { 0x0016, ZCL_BITMAP24_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[0]) } }, /* 44 Cluster: Green Power, Attribute: gpp functionality, Side: client*/ \
	  { 0x0017, ZCL_BITMAP24_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[3]) } }, /* 45 Cluster: Green Power, Attribute: gpp active functionality, Side: client*/ \
	  { 0x0020, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE| ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x00  } }, /* 46 Cluster: Green Power, Attribute: gp shared security key type, Side: client*/ \
		  { 0x0021, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE| ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x00000000000000000000000000000000 } }, /* 47 Cluster: Green Power, Attribute: gp shared security key, Side: client*/ \
	  { 0x0022, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE| ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[6]) } }, /* 48 Cluster: Green Power, Attribute: gp link key, Side: client*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001  } }, /* 49 Cluster: Green Power, Attribute: cluster revision, Side: client*/ \
		  { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 50 Cluster: Color Control, Attribute: current hue, Side: server*/ \
		  { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 51 Cluster: Color Control, Attribute: current saturation, Side: server*/ \
		  { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000  } }, /* 52 Cluster: Color Control, Attribute: remaining time, Side: server*/ \
		  { 0x0003, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x616B  } }, /* 53 Cluster: Color Control, Attribute: current x, Side: server*/ \
		  { 0x0004, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x607D  } }, /* 54 Cluster: Color Control, Attribute: current y, Side: server*/ \
		  { 0x0007, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0x00FA  } }, /* 55 Cluster: Color Control, Attribute: color temperature, Side: server*/ \
		  { 0x0008, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x01  } }, /* 56 Cluster: Color Control, Attribute: color mode, Side: server*/ \
		  { 0x000F, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00  } }, /* 57 Cluster: Color Control, Attribute: color control options, Side: server*/ \
		  { 0x0010, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 58 Cluster: Color Control, Attribute: number of primaries, Side: server*/ \
		  { 0x0011, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 59 Cluster: Color Control, Attribute: primary 1 x, Side: server*/ \
		  { 0x0012, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 60 Cluster: Color Control, Attribute: primary 1 y, Side: server*/ \
		  { 0x0013, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 61 Cluster: Color Control, Attribute: primary 1 intensity, Side: server*/ \
		  { 0x0015, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 62 Cluster: Color Control, Attribute: primary 2 x, Side: server*/ \
		  { 0x0016, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 63 Cluster: Color Control, Attribute: primary 2 y, Side: server*/ \
		  { 0x0017, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 64 Cluster: Color Control, Attribute: primary 2 intensity, Side: server*/ \
		  { 0x0019, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 65 Cluster: Color Control, Attribute: primary 3 x, Side: server*/ \
		  { 0x001A, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 66 Cluster: Color Control, Attribute: primary 3 y, Side: server*/ \
		  { 0x001B, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 67 Cluster: Color Control, Attribute: primary 3 intensity, Side: server*/ \
		  { 0x0020, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 68 Cluster: Color Control, Attribute: primary 4 x, Side: server*/ \
		  { 0x0021, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 69 Cluster: Color Control, Attribute: primary 4 y, Side: server*/ \
		  { 0x0022, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 70 Cluster: Color Control, Attribute: primary 4 intensity, Side: server*/ \
		  { 0x0024, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 71 Cluster: Color Control, Attribute: primary 5 x, Side: server*/ \
		  { 0x0025, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 72 Cluster: Color Control, Attribute: primary 5 y, Side: server*/ \
		  { 0x0026, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 73 Cluster: Color Control, Attribute: primary 5 intensity, Side: server*/ \
		  { 0x0028, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 74 Cluster: Color Control, Attribute: primary 6 x, Side: server*/ \
		  { 0x0029, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 75 Cluster: Color Control, Attribute: primary 6 y, Side: server*/ \
		  { 0x002A, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 76 Cluster: Color Control, Attribute: primary 6 intensity, Side: server*/ \
		  { 0x4000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000  } }, /* 77 Cluster: Color Control, Attribute: enhanced current hue, Side: server*/ \
		  { 0x4001, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x01  } }, /* 78 Cluster: Color Control, Attribute: enhanced color mode, Side: server*/ \
		  { 0x4002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 79 Cluster: Color Control, Attribute: color loop active, Side: server*/ \
		  { 0x4003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 80 Cluster: Color Control, Attribute: color loop direction, Side: server*/ \
		  { 0x4004, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0019  } }, /* 81 Cluster: Color Control, Attribute: color loop time, Side: server*/ \
		  { 0x4005, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x2300  } }, /* 82 Cluster: Color Control, Attribute: color loop start enhanced hue, Side: server*/ \
		  { 0x4006, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000  } }, /* 83 Cluster: Color Control, Attribute: color loop stored enhanced hue, Side: server*/ \
		  { 0x400A, ZCL_BITMAP16_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000  } }, /* 84 Cluster: Color Control, Attribute: color capabilities, Side: server*/ \
		  { 0x400B, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000  } }, /* 85 Cluster: Color Control, Attribute: color temp physical min, Side: server*/ \
		  { 0x400C, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0xFEFF  } }, /* 86 Cluster: Color Control, Attribute: color temp physical max, Side: server*/ \
		  { 0x400D, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 87 Cluster: Color Control, Attribute: couple color temp to level min-mireds, Side: server*/ \
		  { 0x4010, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE| ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0x4444  } }, /* 88 Cluster: Color Control, Attribute: start up color temperature mireds, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001  } }, /* 89 Cluster: Color Control, Attribute: cluster revision, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001  } }, /* 90 Cluster: Occupancy Sensing, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001  } } /* 91 Cluster: ZLL Commissioning, Attribute: cluster revision, Side: server*/ \
		 }

 

#define GENERATED_CLUSTER_COUNT (19)
	
// This is an array of EmberAfCluster structures.
#define GENERATED_CLUSTERS { \
  { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 14, 0, CLUSTER_MASK_SERVER, NULL }, /* 0, Endpoint Id: 1, Cluster: Basic, Side: server*/ \
	  { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[14]), 2, 4, CLUSTER_MASK_SERVER, NULL }, /* 1, Endpoint Id: 1, Cluster: Identify, Side: server*/ \
	  { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 2, 3, CLUSTER_MASK_SERVER, NULL }, /* 2, Endpoint Id: 1, Cluster: Groups, Side: server*/ \
	  { 0x0005, (EmberAfAttributeMetadata*)&(generatedAttributes[18]), 6, 8, CLUSTER_MASK_SERVER, NULL }, /* 3, Endpoint Id: 1, Cluster: Scenes, Side: server*/ \
	  { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[24]), 6, 9, CLUSTER_MASK_SERVER, NULL }, /* 4, Endpoint Id: 1, Cluster: On/off, Side: server*/ \
	  { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[30]), 8, 11, CLUSTER_MASK_SERVER, NULL }, /* 5, Endpoint Id: 1, Cluster: Level Control, Side: server*/ \
	  { 0x0019, (EmberAfAttributeMetadata*)&(generatedAttributes[38]), 4, 15, CLUSTER_MASK_CLIENT, NULL }, /* 6, Endpoint Id: 1, Cluster: Over the Air Bootloading, Side: client*/ \
	  { 0x0406, (EmberAfAttributeMetadata*)&(generatedAttributes[90]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 7, Endpoint Id: 1, Cluster: Occupancy Sensing, Side: client*/ \
	  { 0x1000, (EmberAfAttributeMetadata*)&(generatedAttributes[91]), 1, 2, CLUSTER_MASK_SERVER, NULL }, /* 8, Endpoint Id: 1, Cluster: ZLL Commissioning, Side: server*/ \
	  { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 14, 0, CLUSTER_MASK_SERVER, NULL }, /* 9, Endpoint Id: 2, Cluster: Basic, Side: server*/ \
	  { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[14]), 2, 4, CLUSTER_MASK_SERVER, NULL }, /* 10, Endpoint Id: 2, Cluster: Identify, Side: server*/ \
	  { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 2, 3, CLUSTER_MASK_SERVER, NULL }, /* 11, Endpoint Id: 2, Cluster: Groups, Side: server*/ \
	  { 0x0005, (EmberAfAttributeMetadata*)&(generatedAttributes[18]), 6, 8, CLUSTER_MASK_SERVER, NULL }, /* 12, Endpoint Id: 2, Cluster: Scenes, Side: server*/ \
	  { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[24]), 6, 9, CLUSTER_MASK_SERVER, NULL }, /* 13, Endpoint Id: 2, Cluster: On/off, Side: server*/ \
	  { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[30]), 5, 7, CLUSTER_MASK_SERVER, NULL }, /* 14, Endpoint Id: 2, Cluster: Level Control, Side: server*/ \
	  { 0x0019, (EmberAfAttributeMetadata*)&(generatedAttributes[38]), 4, 15, CLUSTER_MASK_CLIENT, NULL }, /* 15, Endpoint Id: 2, Cluster: Over the Air Bootloading, Side: client*/ \
	  { 0x0300, (EmberAfAttributeMetadata*)&(generatedAttributes[50]), 40, 66, CLUSTER_MASK_SERVER, NULL }, /* 16, Endpoint Id: 2, Cluster: Color Control, Side: server*/ \
	  { 0x1000, (EmberAfAttributeMetadata*)&(generatedAttributes[91]), 1, 2, CLUSTER_MASK_SERVER, NULL }, /* 17, Endpoint Id: 2, Cluster: ZLL Commissioning, Side: server*/ \
	  { 0x0021, (EmberAfAttributeMetadata*)&(generatedAttributes[42]), 8, 297, CLUSTER_MASK_CLIENT, NULL } /* 18, Endpoint Id: 242, Cluster: Green Power, Side: client*/ \
	 }

 
#define GENERATED_ENDPOINT_TYPE_COUNT (3)

// This is an array of EmberAfEndpointType structures.
#define GENERATED_ENDPOINT_TYPES { \
  { ((EmberAfCluster*)&(generatedClusters[0])), 9, 54 }, \
	  { ((EmberAfCluster*)&(generatedClusters[9])), 9, 114 }, \
	  { ((EmberAfCluster*)&(generatedClusters[18])), 1, 297 }, \
	 } 
// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (255)

// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (191)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE (465)

// Number of fixed endpoints	
#define FIXED_ENDPOINT_COUNT (3)

// Array of endpoints that are supported, the data inside the array is the
// endpoint number.
#define FIXED_ENDPOINT_ARRAY { \
  1, \
  2, \
  242 \
}

// Array of profile ids
#define FIXED_PROFILE_IDS { \
  260, \
  260, \
  41440 \
}

// Array of device ids
#define FIXED_DEVICE_IDS { \
  257, \
  269, \
  97 \
}

// Array of device versions
#define FIXED_DEVICE_VERSIONS { \
  1, \
  1, \
  0 \
}

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES { \
  0, \
  1, \
  2 \
}

// Array of networks supported on each endpoint
#define FIXED_NETWORKS { \
  0, \
  0, \
  0 \
}

// Array of EmberAfCommandMetadata structs.
#define ZAP_COMMAND_MASK(mask) COMMAND_MASK_ ## mask
#define EMBER_AF_GENERATED_COMMAND_COUNT  (89)
#define GENERATED_COMMANDS { \
  { 0x0000, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* 0, Cluster: Basic, Command: ResetToFactoryDefaults*/ \
	  { 0x0003, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* 1, Cluster: Identify, Command: Identify*/ \
	  { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* 2, Cluster: Identify, Command: IdentifyQueryResponse*/ \
	  { 0x0003, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* 3, Cluster: Identify, Command: IdentifyQuery*/ \
	  { 0x0003, 0x40, COMMAND_MASK_INCOMING_SERVER }, /* 4, Cluster: Identify, Command: TriggerEffect*/ \
	  { 0x0004, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* 5, Cluster: Groups, Command: AddGroup*/ \
	  { 0x0004, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* 6, Cluster: Groups, Command: AddGroupResponse*/ \
	  { 0x0004, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* 7, Cluster: Groups, Command: ViewGroup*/ \
	  { 0x0004, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* 8, Cluster: Groups, Command: ViewGroupResponse*/ \
	  { 0x0004, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* 9, Cluster: Groups, Command: GetGroupMembership*/ \
	  { 0x0004, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* 10, Cluster: Groups, Command: GetGroupMembershipResponse*/ \
	  { 0x0004, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* 11, Cluster: Groups, Command: RemoveGroup*/ \
	  { 0x0004, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* 12, Cluster: Groups, Command: RemoveGroupResponse*/ \
	  { 0x0004, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* 13, Cluster: Groups, Command: RemoveAllGroups*/ \
	  { 0x0004, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* 14, Cluster: Groups, Command: AddGroupIfIdentifying*/ \
	  { 0x0005, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* 15, Cluster: Scenes, Command: AddScene*/ \
	  { 0x0005, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* 16, Cluster: Scenes, Command: AddSceneResponse*/ \
	  { 0x0005, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* 17, Cluster: Scenes, Command: ViewScene*/ \
	  { 0x0005, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* 18, Cluster: Scenes, Command: ViewSceneResponse*/ \
	  { 0x0005, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* 19, Cluster: Scenes, Command: RemoveScene*/ \
	  { 0x0005, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* 20, Cluster: Scenes, Command: RemoveSceneResponse*/ \
	  { 0x0005, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* 21, Cluster: Scenes, Command: RemoveAllScenes*/ \
	  { 0x0005, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* 22, Cluster: Scenes, Command: RemoveAllScenesResponse*/ \
	  { 0x0005, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* 23, Cluster: Scenes, Command: StoreScene*/ \
	  { 0x0005, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* 24, Cluster: Scenes, Command: StoreSceneResponse*/ \
	  { 0x0005, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* 25, Cluster: Scenes, Command: RecallScene*/ \
	  { 0x0005, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* 26, Cluster: Scenes, Command: GetSceneMembership*/ \
	  { 0x0005, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* 27, Cluster: Scenes, Command: GetSceneMembershipResponse*/ \
	  { 0x0005, 0x40, COMMAND_MASK_INCOMING_SERVER }, /* 28, Cluster: Scenes, Command: EnhancedAddScene*/ \
	  { 0x0005, 0x41, COMMAND_MASK_INCOMING_SERVER }, /* 29, Cluster: Scenes, Command: EnhancedViewScene*/ \
	  { 0x0005, 0x42, COMMAND_MASK_INCOMING_SERVER }, /* 30, Cluster: Scenes, Command: CopyScene*/ \
	  { 0x0006, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* 31, Cluster: On/off, Command: Off*/ \
	  { 0x0006, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* 32, Cluster: On/off, Command: On*/ \
	  { 0x0006, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* 33, Cluster: On/off, Command: Toggle*/ \
	  { 0x0006, 0x40, COMMAND_MASK_INCOMING_SERVER }, /* 34, Cluster: On/off, Command: OffWithEffect*/ \
	  { 0x0006, 0x41, COMMAND_MASK_INCOMING_SERVER }, /* 35, Cluster: On/off, Command: OnWithRecallGlobalScene*/ \
	  { 0x0006, 0x42, COMMAND_MASK_INCOMING_SERVER }, /* 36, Cluster: On/off, Command: OnWithTimedOff*/ \
	  { 0x0008, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* 37, Cluster: Level Control, Command: MoveToLevel*/ \
	  { 0x0008, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* 38, Cluster: Level Control, Command: Move*/ \
	  { 0x0008, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* 39, Cluster: Level Control, Command: Step*/ \
	  { 0x0008, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* 40, Cluster: Level Control, Command: Stop*/ \
	  { 0x0008, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* 41, Cluster: Level Control, Command: MoveToLevelWithOnOff*/ \
	  { 0x0008, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* 42, Cluster: Level Control, Command: MoveWithOnOff*/ \
	  { 0x0008, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* 43, Cluster: Level Control, Command: StepWithOnOff*/ \
	  { 0x0008, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* 44, Cluster: Level Control, Command: StopWithOnOff*/ \
	  { 0x0019, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* 45, Cluster: Over the Air Bootloading, Command: QueryNextImageRequest*/ \
	  { 0x0019, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* 46, Cluster: Over the Air Bootloading, Command: ImageBlockRequest*/ \
	  { 0x0019, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* 47, Cluster: Over the Air Bootloading, Command: UpgradeEndRequest*/ \
	  { 0x0021, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* 48, Cluster: Green Power, Command: GpPairing*/ \
	  { 0x0021, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* 49, Cluster: Green Power, Command: GpProxyCommissioningMode*/ \
	  { 0x0021, 0x06, COMMAND_MASK_INCOMING_CLIENT }, /* 50, Cluster: Green Power, Command: GpResponse*/ \
	  { 0x0021, 0x0B, COMMAND_MASK_INCOMING_CLIENT }, /* 51, Cluster: Green Power, Command: GpProxyTableRequest*/ \
	  { 0x0300, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* 52, Cluster: Color Control, Command: MoveToHue*/ \
	  { 0x0300, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* 53, Cluster: Color Control, Command: MoveHue*/ \
	  { 0x0300, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* 54, Cluster: Color Control, Command: StepHue*/ \
	  { 0x0300, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* 55, Cluster: Color Control, Command: MoveToSaturation*/ \
	  { 0x0300, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* 56, Cluster: Color Control, Command: MoveSaturation*/ \
	  { 0x0300, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* 57, Cluster: Color Control, Command: StepSaturation*/ \
	  { 0x0300, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* 58, Cluster: Color Control, Command: MoveToHueAndSaturation*/ \
	  { 0x0300, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* 59, Cluster: Color Control, Command: MoveToColor*/ \
	  { 0x0300, 0x08, COMMAND_MASK_INCOMING_SERVER }, /* 60, Cluster: Color Control, Command: MoveColor*/ \
	  { 0x0300, 0x09, COMMAND_MASK_INCOMING_SERVER }, /* 61, Cluster: Color Control, Command: StepColor*/ \
	  { 0x0300, 0x0A, COMMAND_MASK_INCOMING_SERVER }, /* 62, Cluster: Color Control, Command: MoveToColorTemperature*/ \
	  { 0x0300, 0x40, COMMAND_MASK_INCOMING_SERVER }, /* 63, Cluster: Color Control, Command: EnhancedMoveToHue*/ \
	  { 0x0300, 0x41, COMMAND_MASK_INCOMING_SERVER }, /* 64, Cluster: Color Control, Command: EnhancedMoveHue*/ \
	  { 0x0300, 0x42, COMMAND_MASK_INCOMING_SERVER }, /* 65, Cluster: Color Control, Command: EnhancedStepHue*/ \
	  { 0x0300, 0x43, COMMAND_MASK_INCOMING_SERVER }, /* 66, Cluster: Color Control, Command: EnhancedMoveToHueAndSaturation*/ \
	  { 0x0300, 0x44, COMMAND_MASK_INCOMING_SERVER }, /* 67, Cluster: Color Control, Command: ColorLoopSet*/ \
	  { 0x0300, 0x47, COMMAND_MASK_INCOMING_SERVER }, /* 68, Cluster: Color Control, Command: StopMoveStep*/ \
	  { 0x0300, 0x4B, COMMAND_MASK_INCOMING_SERVER }, /* 69, Cluster: Color Control, Command: MoveColorTemperature*/ \
	  { 0x0300, 0x4C, COMMAND_MASK_INCOMING_SERVER }, /* 70, Cluster: Color Control, Command: StepColorTemperature*/ \
	  { 0x1000, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* 71, Cluster: ZLL Commissioning, Command: ScanRequest*/ \
	  { 0x1000, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* 72, Cluster: ZLL Commissioning, Command: ScanResponse*/ \
	  { 0x1000, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* 73, Cluster: ZLL Commissioning, Command: DeviceInformationRequest*/ \
	  { 0x1000, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* 74, Cluster: ZLL Commissioning, Command: DeviceInformationResponse*/ \
	  { 0x1000, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* 75, Cluster: ZLL Commissioning, Command: IdentifyRequest*/ \
	  { 0x1000, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* 76, Cluster: ZLL Commissioning, Command: ResetToFactoryNewRequest*/ \
	  { 0x1000, 0x10, COMMAND_MASK_INCOMING_SERVER }, /* 77, Cluster: ZLL Commissioning, Command: NetworkStartRequest*/ \
	  { 0x1000, 0x11, COMMAND_MASK_OUTGOING_SERVER }, /* 78, Cluster: ZLL Commissioning, Command: NetworkStartResponse*/ \
	  { 0x1000, 0x12, COMMAND_MASK_INCOMING_SERVER }, /* 79, Cluster: ZLL Commissioning, Command: NetworkJoinRouterRequest*/ \
	  { 0x1000, 0x13, COMMAND_MASK_OUTGOING_SERVER }, /* 80, Cluster: ZLL Commissioning, Command: NetworkJoinRouterResponse*/ \
	  { 0x1000, 0x14, COMMAND_MASK_INCOMING_SERVER }, /* 81, Cluster: ZLL Commissioning, Command: NetworkJoinEndDeviceRequest*/ \
	  { 0x1000, 0x15, COMMAND_MASK_OUTGOING_SERVER }, /* 82, Cluster: ZLL Commissioning, Command: NetworkJoinEndDeviceResponse*/ \
	  { 0x1000, 0x16, COMMAND_MASK_INCOMING_SERVER }, /* 83, Cluster: ZLL Commissioning, Command: NetworkUpdateRequest*/ \
	  { 0x1000, 0x40, COMMAND_MASK_OUTGOING_SERVER }, /* 84, Cluster: ZLL Commissioning, Command: EndpointInformation*/ \
	  { 0x1000, 0x41, COMMAND_MASK_INCOMING_SERVER }, /* 85, Cluster: ZLL Commissioning, Command: GetGroupIdentifiersRequest*/ \
	  { 0x1000, 0x41, COMMAND_MASK_OUTGOING_SERVER }, /* 86, Cluster: ZLL Commissioning, Command: GetGroupIdentifiersResponse*/ \
	  { 0x1000, 0x42, COMMAND_MASK_INCOMING_SERVER }, /* 87, Cluster: ZLL Commissioning, Command: GetEndpointListRequest*/ \
	  { 0x1000, 0x42, COMMAND_MASK_OUTGOING_SERVER }, /* 88, Cluster: ZLL Commissioning, Command: GetEndpointListResponse*/ \
	 } 
// Array of EmberAfManufacturerCodeEntry structures for commands.
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_COMMAND_MANUFACTURER_CODES { \
  { 0x00, 0x00 }  \
																																																																																									 } 
// This is an array of EmberAfManufacturerCodeEntry structures for clusters.
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_CLUSTER_MANUFACTURER_CODES { \
  { 0x00, 0x00 }  \
																			 } 
// This is an array of EmberAfManufacturerCodeEntry structures for attributes.
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES { \
  { 0x00, 0x00 } \
																																																																																												 } 
// Array of EmberAfPluginReportingEntry structures.
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (9)
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS { \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0001, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 1, Cluster: On/off, Attribute: on/off */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0001, 0x0008, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 1, Cluster: Level Control, Attribute: current level */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0002, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 2, Cluster: On/off, Attribute: on/off */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0002, 0x0008, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 2, Cluster: Level Control, Attribute: current level */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0002, 0x0300, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 2, Cluster: Color Control, Attribute: current hue */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0002, 0x0300, 0x0001, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 2, Cluster: Color Control, Attribute: current saturation */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0002, 0x0300, 0x0003, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 2, Cluster: Color Control, Attribute: current x */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0002, 0x0300, 0x0004, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 2, Cluster: Color Control, Attribute: current y */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0002, 0x0300, 0x0007, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 2, Cluster: Color Control, Attribute: color temperature */ \
	 } 

#define EMBER_AF_MANUFACTURER_CODE 0x1002
#define EMBER_AF_DEFAULT_RESPONSE_POLICY_ALWAYS

// All Enabled Clusters
#define ZCL_USING_BASIC_CLUSTER_SERVER
#define ZCL_USING_IDENTIFY_CLUSTER_SERVER
#define ZCL_USING_GROUPS_CLUSTER_SERVER
#define ZCL_USING_SCENES_CLUSTER_SERVER
#define ZCL_USING_ON_OFF_CLUSTER_SERVER
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_CLIENT
#define ZCL_USING_GREEN_POWER_CLUSTER_CLIENT
#define ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
#define ZCL_USING_OCCUPANCY_SENSING_CLUSTER_CLIENT
#define ZCL_USING_ZLL_COMMISSIONING_CLUSTER_SERVER

// Cluster Counts
#define EMBER_AF_BASIC_CLUSTER_SERVER_ENDPOINT_COUNT (2)
#define EMBER_AF_IDENTIFY_CLUSTER_SERVER_ENDPOINT_COUNT (2)
#define EMBER_AF_GROUPS_CLUSTER_SERVER_ENDPOINT_COUNT (2)
#define EMBER_AF_SCENES_CLUSTER_SERVER_ENDPOINT_COUNT (2)
#define EMBER_AF_ON_OFF_CLUSTER_SERVER_ENDPOINT_COUNT (2)
#define EMBER_AF_LEVEL_CONTROL_CLUSTER_SERVER_ENDPOINT_COUNT (2)
#define EMBER_AF_OTA_BOOTLOAD_CLUSTER_CLIENT_ENDPOINT_COUNT (2)
#define EMBER_AF_GREEN_POWER_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_COLOR_CONTROL_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_OCCUPANCY_SENSING_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_ZLL_COMMISSIONING_CLUSTER_SERVER_ENDPOINT_COUNT (2)

// All Enabled Cluster Attributes
#define ZCL_USING_BASIC_CLUSTER_VERSION_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_APPLICATION_VERSION_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_STACK_VERSION_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_HW_VERSION_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_MANUFACTURER_NAME_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_MODEL_IDENTIFIER_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_DATE_CODE_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_POWER_SOURCE_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_GENERIC_DEVICE_CLASS_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_GENERIC_DEVICE_TYPE_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_PRODUCT_CODE_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_PRODUCT_URL_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_SW_BUILD_ID_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_IDENTIFY_CLUSTER_IDENTIFY_TIME_ATTRIBUTE
#define ZCL_USING_IDENTIFY_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_GROUPS_CLUSTER_GROUP_NAME_SUPPORT_ATTRIBUTE
#define ZCL_USING_GROUPS_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_SCENES_CLUSTER_SCENE_COUNT_ATTRIBUTE
#define ZCL_USING_SCENES_CLUSTER_CURRENT_SCENE_ATTRIBUTE
#define ZCL_USING_SCENES_CLUSTER_CURRENT_GROUP_ATTRIBUTE
#define ZCL_USING_SCENES_CLUSTER_SCENE_VALID_ATTRIBUTE
#define ZCL_USING_SCENES_CLUSTER_SCENE_NAME_SUPPORT_ATTRIBUTE
#define ZCL_USING_SCENES_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_ON_OFF_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_GLOBAL_SCENE_CONTROL_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_ON_TIME_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_OFF_WAIT_TIME_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_START_UP_ON_OFF_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_CURRENT_LEVEL_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_LEVEL_CONTROL_REMAINING_TIME_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_OPTIONS_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_ON_OFF_TRANSITION_TIME_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_ON_LEVEL_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_DEFAULT_MOVE_RATE_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_START_UP_CURRENT_LEVEL_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_UPGRADE_SERVER_ID_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_FILE_OFFSET_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_IMAGE_UPGRADE_STATUS_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_MAX_PROXY_TABLE_ENTRIES_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_PROXY_TABLE_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_FUNCTIONALITY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_ACTIVE_FUNCTIONALITY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GP_SHARED_SECURITY_KEY_TYPE_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GP_SHARED_SECURITY_KEY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GP_LINK_KEY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_CURRENT_HUE_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_CURRENT_SATURATION_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_CURRENT_X_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_CURRENT_Y_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_TEMPERATURE_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_MODE_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_OPTIONS_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_NUMBER_OF_PRIMARIES_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_1_X_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_1_Y_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_1_INTENSITY_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_2_X_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_2_Y_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_2_INTENSITY_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_3_X_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_3_Y_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_3_INTENSITY_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_4_X_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_4_Y_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_4_INTENSITY_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_5_X_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_5_Y_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_5_INTENSITY_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_6_X_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_6_Y_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_PRIMARY_6_INTENSITY_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_ENHANCED_CURRENT_HUE_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_ENHANCED_COLOR_MODE_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_LOOP_ACTIVE_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_LOOP_DIRECTION_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_LOOP_TIME_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_CAPABILITIES_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_TEMPERATURE_LEVEL_MIN_MIREDS_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_START_UP_COLOR_TEMPERATURE_MIREDS_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_OCCUPANCY_SENSING_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_ZLL_COMMISSIONING_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE

#define EMBER_AF_SUPPORT_COMMAND_DISCOVERY


#endif // SILABS_AF_ENDPOINT_CONFIG